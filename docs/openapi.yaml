openapi: '3.0.2'
info:
  title: Jatgam Wishlist API
  version: '1.0'
servers:
  - url: https://wishlist.jatgam.com/api

components:
  securitySchemes:
    JwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        token:
          type: string
        expire:
          type: string
    GenericResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    GetItemsResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Items'
    Items:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        rank:
          type: integer
  parameters:
    jwtHeaderParam:
      in: header
      name: Authorization
      required: true
      schema:
        type: string
        format: jwt
      description: "The User JWT Header for Authenticated Requests. Bearer <token>"
paths:
  /user/auth:
    post:
      description: User Auth/login endpoint. Returns a jwt if authentication is successful.
      requestBody:
        description: Authentication Values
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: The username to login as
                password:
                  type: string
                  description: The password to the supplied username
      responses:
        '200':
          description: Auth successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                code: 200
                message: "Authentication Successful"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                expire: "2019-12-30T16:49:20Z"
        '401':
          description: Auth Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 401
                message: "Authentication Failed: User or Password invalid."
    get:
      description: Validates a users jwt to see if currently authenticated
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      responses:
        '200':
          description: User is currently Authenticated/Valid JWT
        '401':
          description: User isnt authenticated/invalid JWT
  /user/auth/refresh:
    post:
      description: If the supplied JWT is valid, it will be refreshed and the expiration time will be reset.
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      responses:
        '200':
          description: JWT Successfully Refreshed.
        '401':
          description: User isnt authenticated/invalid JWT
  /user/register:
    post:
      description: Register a new user account
      requestBody:
        description: Registration Fields
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - username
                - password
                - email
                - firstname
                - lastname
              properties:
                username:
                  type: string
                  description: Username for the new account
                password:
                  type: string
                  description: Password for the new account
                email: 
                  type: string
                  description: EMail for the new account
                firstname:
                  type: string
                  description: Firstname for the new account
                lastname:
                  type: string
                  description: Lastname for the new account
      responses:
        '200':
          description: New account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "User created."
        '400':
          description: Creation Failed, bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 400
                message: "Reason NOT created."
        '422':
          description: Creation Failed, data validation error
  /user/password_forgot:
    post:
      description: Start the password reset process
      requestBody:
        description: Account to reset
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: Email for the account to reset
      responses:
        '200':
          description: Password reset process started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "Sending an Email to the provided address."
        '400':
          description: Password Reset Failed, bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 400
                message: "Reason NOT started."
        '422':
          description: Password Reset Failed, data validation error
  /user/password_reset/{pwResetToken}:
    parameters:
      - in: path
        name: pwResetToken
        required: true
        schema:
          type: string
        description: The token from the email allowing a pw reset
    get:
      description: Validate a token
      responses:
        '200':
          description: Password reset token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "Token Valid"
        '400':
          description: Password Reset token invalid, bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 400
                message: "Password reset token is invalid or expired."
        '422':
          description: Password Reset Token, data validation error
    post:
      description: Password Reset
      requestBody:
        description: Account to reset
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email for the account to reset
                password:
                  type: string
                  description: The new password for the acocunt
      responses:
        '200':
          description: Password reset success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "Password Reset"
        '400':
          description: Password Reset Failed, bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 400
                message: "Failed to reset the password"
        '422':
          description: Password Reset Failed, data validation error
  /item:
    get:
      description: Get Current Wanted Items
      responses:
        '200':
          description: Got a list of Wanted items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemsResponse'
        '500':
          description: Failed to get items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemsResponse'
              example:
                success: false
                items: []
    post:
      description: Add a new Item (Admin)
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      requestBody:
        description: Item to Add
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - name
                - url
                - rank
              properties:
                name:
                  type: string
                  description: The name of the item
                url:
                  type: string
                  description: The URL of the Item
                rank:
                  type: integer
                  description: The rank of the item
      responses:
        '200':
          description: Added Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "Item created."
        '401':
          description: Unauthorized
        '500':
          description: Failed to add Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 400
                message: "Failed to create item."
  /item/all:
    get:
      description: Get All Items (Admin)
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      responses:
        '200':
          description: Got a list of all Items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemsResponse'
        '401':
          description: Unauthorized
        '500':
          description: Failed to get items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemsResponse'
              example:
                success: false
                items: []
  /item/reserved:
    get:
      description: Get Your Reserved Items
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      responses:
        '200':
          description: Got a list of your reserved items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemsResponse'
        '401':
          description: Unauthorized
        '500':
          description: Failed to get items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemsResponse'
              example:
                success: false
                items: []
  /item/id/{itemID}:
    parameters:
      - in: path
        name: itemID
        required: true
        schema:
          type: integer
        description: The Item ID
    delete:
      description: Delete an Item (Admin)
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      responses:
        '200':
          description: Item Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "Item Deleted."
        '401':
          description: Unauthorized
        '422':
          description: Item Delete Failed, data validation error
        '500':
          description: Failed to unreserve Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 500
                message: "Reason"
  /item/id/{itemID}/reserve:
    parameters:
      - in: path
        name: itemID
        required: true
        schema:
          type: integer
        description: The Item ID to reserve
    post:
      description: Reserve the item to the calling user
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      responses:
        '200':
          description: Reserved Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "Item Reserved."
        '401':
          description: Unauthorized
        '422':
          description: Item Reserve Failed, data validation error
        '500':
          description: Failed to reserve Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 500
                message: "Reason"
  /item/id/{itemID}/unreserve:
    parameters:
      - in: path
        name: itemID
        required: true
        schema:
          type: integer
        description: The Item ID to unreserve
    post:
      description: UnReserve the item to the calling user
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      responses:
        '200':
          description: UnReserved Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "Item UnReserved."
        '401':
          description: Unauthorized
        '422':
          description: Item Unreserve Failed, data validation error
        '500':
          description: Failed to unreserve Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 500
                message: "Reason"
  /item/id/{itemID}/rank/{rank}:
    parameters:
      - in: path
        name: itemID
        required: true
        schema:
          type: integer
        description: The Item ID to modify
      - in: path
        name: rank
        required: true
        schema:
          type: integer
        description: The the new Item Rank
    post:
      description: Set a new rank for an Item (Admin)
      security:
        - JwtAuth: []
      parameters:
        - $ref: '#/components/parameters/jwtHeaderParam'
      responses:
        '200':
          description: Rank Set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 200
                message: "Item Rank Updated."
        '401':
          description: Unauthorized
        '422':
          description: Item Rank Set Failed, data validation error
        '500':
          description: Faile to set the Item Rank
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
              example:
                code: 500
                message: "Reason"
